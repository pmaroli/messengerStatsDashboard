{"version":3,"sources":["components/ReaxPieChart.js","components/StatisticsCard.js","components/UserLaughReax.js","App.js","index.js"],"names":["ReaxPieChart","props","data","margin","top","right","bottom","left","innerRadius","padAngle","cornerRadius","colors","d","color","borderWidth","borderColor","from","modifiers","enableRadialLabels","slicesLabelsSkipAngle","slicesLabelsTextColor","radialLabelsTextColor","animate","motionStiffness","motionDamping","StatisticsCard","spinnerDisplay","stat","className","role","description","icon","UserLaughReax","userData","userColors","useState","chartData","setChartData","pieText","setPieText","toggle","setToggle","name","setName","reaxGiven","setReaxGiven","reaxReceived","setReaxReceived","totalMsgs","setTotalMsgs","useEffect","setChartReceived","user","sent","laugh_reax_given","laugh_reax_received","reax_received_dist","laugh_reax_received_dist","temp","push","id","label","value","toggleChart","reax_given_dist","laugh_reax_given_dist","setChartGiven","onClick","App","users","setUsers","setUserColors","parseData","sampleData","Object","keys","map","key","assign","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f22f7255.chunk.js","sourcesContent":["import React from 'react';\r\nimport { ResponsivePie } from '@nivo/pie'\r\n\r\nconst ReaxPieChart = (props) => {\r\n\r\n  const { data } = props;\r\n\r\n  return (\r\n    <ResponsivePie\r\n      data={data}\r\n      margin={{ top: 0, right: 0, bottom: 0, left: 0 }}\r\n      innerRadius={0.8}\r\n      padAngle={0.7}\r\n      cornerRadius={3}\r\n      colors={d => d.color}\r\n      borderWidth={1}\r\n      borderColor={{ from: 'color', modifiers: [['darker', 0.2]] }}\r\n      enableRadialLabels={false}\r\n      slicesLabelsSkipAngle={10}\r\n      slicesLabelsTextColor=\"#ffffff\"\r\n      radialLabelsTextColor=\"#ffffff\"\r\n      animate={true}\r\n      motionStiffness={90}\r\n      motionDamping={15}\r\n    />\r\n  );\r\n\r\n}\r\n\r\nexport default ReaxPieChart;\r\n","import React, { } from 'react';\r\n\r\nconst StatisticsCard = (props) => {\r\n\r\n  const spinnerDisplay = props.stat !== '' ? 'd-none' : '';\r\n\r\n  return (\r\n    <div className=\"col-12 col-md px-2 mb-2 mb-md-3 no-pointer\">\r\n\r\n      <div className=\"card fill statistics shadow-sm\">\r\n        <div className=\"card-body\">\r\n\r\n          <div className={`spinner-border ${spinnerDisplay}`} role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n          </div>\r\n\r\n          <h1 className={`card-title`}>{props.stat}</h1>\r\n          <p className=\"card-text\">{props.description}</p>\r\n\r\n        </div>\r\n\r\n        <i className=\"material-icons card-icon\">{props.icon}</i>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StatisticsCard;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './ReaxPieChart';\r\nimport ReaxPieChart from './ReaxPieChart';\r\nimport StatisticsCard from './StatisticsCard';\r\n\r\nconst UserLaughReax = (props) => {\r\n  const {userData, userColors} = props\r\n\r\n  const [chartData, setChartData] = useState([]);\r\n  const [pieText, setPieText] = useState('Reacts Received');\r\n  const [toggle, setToggle] = useState(true);\r\n  const [name, setName] = useState('');\r\n  const [reaxGiven, setReaxGiven] = useState('');\r\n  const [reaxReceived, setReaxReceived] = useState('');\r\n  const [totalMsgs, setTotalMsgs] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (!userData) { return }\r\n\r\n    setChartReceived();\r\n    setName(userData.user)\r\n    setTotalMsgs(userData.sent);\r\n    setReaxGiven(userData.laugh_reax_given);\r\n    setReaxReceived(userData.laugh_reax_received);\r\n  }, [userData])\r\n\r\n  const setChartGiven = () => {\r\n    if (!userData) { return }\r\n\r\n    const reax_given_dist = userData.laugh_reax_given_dist;\r\n    let temp = []\r\n\r\n    for (let user in reax_given_dist) {\r\n      if (reax_given_dist[user] !== 0) {\r\n        temp.push({\r\n          id: user,\r\n          label: user,\r\n          value: reax_given_dist[user],\r\n          color: userColors[user],\r\n        })\r\n      }\r\n    }\r\n    setChartData(temp);\r\n  }\r\n\r\n  const setChartReceived = () => {\r\n    if ( !userData ) { return }\r\n\r\n    const reax_received_dist = userData.laugh_reax_received_dist;\r\n    let temp = []\r\n\r\n    for (let user in reax_received_dist) {\r\n      if ( reax_received_dist[user] !== 0 ) {\r\n        temp.push({\r\n          id: user,\r\n          label: user,\r\n          value: reax_received_dist[user],\r\n          color: userColors[user],\r\n        })\r\n      }\r\n    }\r\n    setChartData(temp);\r\n  }\r\n\r\n  const toggleChart = () => {\r\n    if (!userData) { return }\r\n\r\n    if ( toggle ) {\r\n      setPieText('Reacts Given');\r\n      setChartGiven();\r\n      setToggle(false);\r\n    } else {\r\n      setPieText('Reacts Received');\r\n      setChartReceived();\r\n      setToggle(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"col-12 col-lg-6 col-xxl-4 px-2 pb-3\">\r\n\r\n      <div className=\"card shadow-sm no-pointer\">\r\n\r\n        <h2 className=\"display-name\">{name}</h2>\r\n\r\n        <div className=\"row justify-content-center\">\r\n\r\n          <div className=\"col-12 col-lg-8 px-sm-4 mb-md-2\">\r\n\r\n            <div className=\"pie-root\">\r\n              <ReaxPieChart data={chartData} />\r\n              <div className=\"overlay\">\r\n                <div className=\"inner-text\" onClick={() => toggleChart()}>\r\n                  <span className=\"display-4 inner-text\">{pieText}</span><br />\r\n                  <span className=\"display-4 sub-text\">Click to toggle</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n          </div>\r\n\r\n          <div className=\"col stats-col align-middle\">\r\n            <StatisticsCard stat={totalMsgs} description=\"Total Messages Sent\" />\r\n            <StatisticsCard stat={reaxReceived} description=\"Laugh Reacts Received\" />\r\n            <StatisticsCard stat={reaxGiven} description=\"Laugh Reacts Given\" />\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserLaughReax;\r\n","import React, {useEffect, useState} from 'react';\nimport sampleData from './sampleData.json'\nimport axios from 'axios';\nimport './css/main.css';\n\nimport './components/UserLaughReax'\nimport UserLaughReax from './components/UserLaughReax';\n\nfunction App() {\n  // Import data from a json file if offline\n  const offline = true;\n\n  const [users, setUsers] = useState({});\n  const [userColors, setUserColors] = useState({});\n\n  useEffect(() => {\n    if ( offline ) {\n      parseData(sampleData)\n      return\n    }\n\n    axios.get('/getLikes').then(res => {\n      console.log(res.data)\n      parseData(res.data)\n    }).catch(err => {\n      console.log(err)\n    })\n  }, []) // Empty array passed as second arg acts as componentDidMount()\n\n  const parseData = (data) => {\n    setUsers(data)\n\n    // Set up the user colors\n    let colors = {}\n    for (let user in data) {\n      colors[user] = data[user].color;\n    }\n    setUserColors(colors)\n  }\n\n\n  return (\n    <div className=\"container\">\n      <div className=\"jumbotron bg-transparent my-0 pb-2 pt-5\">\n        <h1 className=\"display-4\">Messenger Statistics Dashboard</h1>\n      </div>\n\n      <div className=\"row\">\n        {Object.keys(users).map(user => {\n          return <UserLaughReax key={user} userData={Object.assign({}, { user }, users[user])} userColors={userColors} />\n        }) }\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}